try:
    import itertools
    import time
    import os
    import sys
    from bip_utils import (
        Bip39MnemonicValidator,
        Bip39Languages,
        Bip39SeedGenerator,
        Bip44,
        Bip44Coins
    )
    from termcolor import cprint

    print("üîÅ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–ª–æ–≤...")

    # === –¢–í–û–ò –î–ê–ù–ù–´–ï ===
    TARGET_ADDRESS = ""

    # –ß–∞—Å—Ç–∏—á–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–Ω–µ–º–æ–Ω–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä 12 —Å–ª–æ–≤)
    partial_mnemonic = [
        None, None, None, None,
        None, None, None, None,
        None, None, None, None
    ]

    # === –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø BIP39 ===
    try:
        with open("bip39_english.txt", "r", encoding="utf-8") as f:
            bip39_words = [word.strip() for word in f.readlines()]
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª bip39_english.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)

    if len(bip39_words) != 2048:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ ({len(bip39_words)} –≤–º–µ—Å—Ç–æ 2048)")
        exit(1)

    # –ò–Ω–¥–µ–∫—Å—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤
    missing_indexes = [i for i, word in enumerate(partial_mnemonic) if word is None]

    if not missing_indexes:
        print("‚ÑπÔ∏è –í—Å–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞–Ω—ã, –Ω–µ—á–µ–≥–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å.")
        exit(0)

    print(f"üìå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤: {len(missing_indexes)}")
    print(f"üí° –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(bip39_words) ** len(missing_indexes)}")

    counter = 0
    valid_counter = 0
    invalid_counter = 0
    start_time = time.time()

    # === –ü–ï–†–ï–ë–û–† –í–°–ï–• –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ===
    for combo in itertools.product(bip39_words, repeat=len(missing_indexes)):
        mnemonic = partial_mnemonic[:]
        for idx, word in zip(missing_indexes, combo):
            mnemonic[idx] = word

        phrase = " ".join(mnemonic)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–±–æ—Ä–∞
        print(f"\r[–ü—Ä–æ–±—É—é {counter}] {phrase}", end="", flush=True)

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–∑—ã c –Ø–í–ù–´–ú —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
            validator = Bip39MnemonicValidator(lang=Bip39Languages.ENGLISH)
            if not validator.IsValid(phrase):
                invalid_counter += 1
                continue

            valid_counter += 1

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
            seed_bytes = Bip39SeedGenerator(phrase, lang=Bip39Languages.ENGLISH).Generate()
            wallet = Bip44.FromSeed(seed_bytes, Bip44Coins.SOLANA)
            address = wallet.PublicKey().ToAddress()

            counter += 1
            print(f"\n[{counter}] {address} ‚Üê {phrase}")

            if address == TARGET_ADDRESS:
                cprint("\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!", "green", attrs=["bold"])
                cprint("–°–∏–¥-—Ñ—Ä–∞–∑–∞:", "green")
                for i, word in enumerate(mnemonic):
                    color = "green" if partial_mnemonic[i] == word else "cyan"
                    cprint(f"{i+1:2d}. {word}", color)
                with open("found.txt", "w", encoding="utf-8") as f:
                    f.write(phrase + "\n")
                break

        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–∞–∑—ã: {phrase}\n{e}")
            continue

    elapsed_time = time.time() - start_time
    print(f"\n‚è±Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫.")
    print(f"üîµ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—Ä–∞–∑: {valid_counter}")
    print(f"üî¥ –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ—Ä–∞–∑: {invalid_counter}")

except Exception as global_error:
    print(f"\n‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {global_error}")
